import socket
import threading

ser_e = 0
ser_d = 0
ser_n = 0

serDir = open("server_directory.txt","r")
serline = serDir.readlines()
serDir.close()

for line in serline:
	data = line.split(":")
	dataval = data[0]
	dataval = dataval.strip()

	if dataval == "Server_e":
		ser_e = int(data[1])
	elif dataval == "Server_d":
		ser_d = int(data[1])
	elif dataval == "Server_n":
		ser_n = int(data[1])
	else:
		break

# print('ser_e :- ',ser_e)
# print('ser_d :-',ser_d)
# print('ser_n :-',ser_n)

ser_pubkey = str(ser_e)+" "+str(ser_n)
ser_prvkey = str(ser_d)+" "+str(ser_n)

# print('server public key :- ',ser_pubkey)
# print('server private key :-',ser_prvkey)

clt_e = 0
clt_n = 0
handshake = False

########################################################################################################################################

def sendHeartBeatResponse(c,cldata):
	cldata = cldata.split(" ")
	datalen = int(cldata[-1])
	cldata = cldata[:-1]
	cldata = " ".join(cldata)

	bufferfile = open("server_buffer.txt","r")
	bufile = bufferfile.readlines()
	bufferfile.close()

	bufstrg = ''
	for line in bufile:
		bufstrg = bufstrg + line

	clmsglen = len(cldata)

	if clmsglen < datalen:
		bufflen = datalen - clmsglen
		newstrg = cldata + bufstrg

		respstrg = cldata + bufstrg[0:bufflen]

		bufferfile = open("server_buffer.txt","w")
		bufferfile.write(newstrg)
		bufferfile.close()

		c.send(respstrg.encode())
	else:
		c.send(cldata.encode())

def insertContentInSerBuffer(data):

	bufferfile = open("server_buffer.txt","r")
	bufile = bufferfile.readlines()
	bufferfile.close()

	bufstrg = ''

	for line in bufile:
		bufstrg = bufstrg + line

	print("insert content in buffer :- ")
	print('content in buffer :- ',bufstrg)
	print(' data to be inserted :-',data)

	bufstrg = bufstrg +'.'+data

	bufferfile = open("server_buffer.txt","w")
	bufferfile.write(bufstrg)
	bufferfile.close()

	print('\n')


def viewBufferContent():

	print("View buffer content")

	bufferfile = open("server_buffer.txt","r")
	bufile = bufferfile.readlines()
	bufferfile.close()

	bufstrg = ''
	for line in bufile:
		bufstrg = bufstrg + line

	print(' buffer content of server :- ',bufstrg)
	print('\n')

def server_process():

	server_socket = socket.socket()
	host = socket.gethostname()
	server_port = 6000

	server_socket.bind((host,server_port))

	server_socket.listen(5)

	c,addr = server_socket.accept()
	print(" server connected by ",addr)

	global clt_e
	global clt_n
	global handshake

	print('clt_e - ',clt_e)
	print('clt_n - ',clt_n)
	print(' handshake - ',handshake)

	isOn = 1
	while isOn:
		datinpSer = ''
		datr = c.recv(1024)
		datr = datr.decode()
		print('\n')

		if not handshake:
			data = datr.split(" ")
			if data[0]=="hsk":
				if data[1] == "01" and data[2]=="clientHello":
					print('client hello received by server')
					sdata = "hsk"
					sdata = sdata + " " +"02"
					sdata = sdata + " " + "serverHello"
					print(sdata)
					print('server sending its hello to cliend')
					c.send(sdata.encode())
				elif data[1]=="03" and data[2]=="CertificateRequestToServerByClient":
					print("client certificate request received by server ")
					sdata = "hsk"
					sdata = sdata + " "+"04"
					sdata = sdata + " "+ser_pubkey
					print(sdata)
					print("server sending its certificate to client and requesting for its certificate")
					c.send(sdata.encode())
				elif data[1]=="05":
					if len(data)!=4:
						print("length of returned data is not 4,we are closing the connection")
						c.close()
						isOn = 0
					else:
						clt_e = int(data[2])
						clt_n = int(data[3])
						print('new clt_e :- ',clt_e)
						print('new clt_n :-',clt_n)
						print("certificate received from client by server")
						sdata = "hsk"
						sdata = sdata +" "+"06"
						sdata = sdata + " "+"FinishHandshakeRequestToClient"
						print(sdata)
						print("server sending FinishHandshakeRequestToClient")
						c.send(sdata.encode())
				elif data[1]=="07" and data[2]=="sendFinishHandShakeRequestToServer":
					handshake = True
					print("request from client to end handshake is received, now handshake is true")
					sdata = "hsk"
					sdata = sdata+" "+"08"
					sdata = sdata+" "+"ServerReadyToReceiveClientRequest"
					print(sdata)

					print('\n')
					print('\n')

					print("Now, Client can send request to server")
					print('Now, Server has following options when client send request (message) to server :-')
					print("1. message orto server. (message)")
					print("2. insertbuffer request in the buffer (insertbuffer)")
					print("3 view content of the buffer of the server (viewbuffer) ")

					c.send(sdata.encode())
				else:
					msgToClient = "your request has received and it is not authorized command"
					c.send(msgToClient.encode())
			else:
				msgToClient = "your request has received and it is not authorized command"
				c.send(msgToClient.encode())
		else:
			data = datr.split()
			print("data received ",data)

			if data[0]=="message" and data[1]=="01":

				data = data[2:]
				data = " ".join(data)
				print("Message received by the server :- ",data)
				serverInpCommand = input('Enter your server command :- ')

				if serverInpCommand == "message": ## message command
					sermsg = input('Enter your response :- ')
					c.send(sermsg.encode())

				elif serverInpCommand == "insertbuffer": ## insertbuffer command
					sermsg = input('Enter data to be inserted :- ')
					insertContentInSerBuffer(sermsg)
					msgToClient = "your request has received"
					c.send(msgToClient.encode())

				elif serverInpCommand == "viewbuffer":  ## viewbuffer command
					viewBufferContent()
					msgToClient = "your request has received"
					c.send(msgToClient.encode())
				else:
					print("unknown request from server side.")
					msgToClient = "your request has received"
					c.send(msgToClient.encode())

			elif data[0]=="heartbeat" and data[1]=="02":
				cldata = data[2:]
				cldata = " ".join(cldata)
				print("Heartbeat request received by server :- ",cldata)
				sendHeartBeatResponse(c,cldata)

			else:
				msgToClient = "your request has received and it is not authorized command"
				c.send(msgToClient.encode())
				



# start of server process
if __name__ == "__main__":

	print("Starting server process")
	server_process()