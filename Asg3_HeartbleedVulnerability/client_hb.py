import socket
import threading

clt_e = 0
clt_d = 0
clt_n = 0

cltDir = open("client_directory.txt","r")
cltline = cltDir.readlines()
cltDir.close()

for line in cltline:
	data = line.split(":")
	dataval = data[0]
	dataval = dataval.strip()

	if dataval == "client_e":
		clt_e = int(data[1])
	elif dataval == "client_d":
		clt_d = int(data[1])
	elif dataval == "client_n":
		clt_n = int(data[1])
	else:
		break

# print('clt_e :- ',clt_e)
# print('clt_d :- ',clt_d)
# print('clt_n :- ',clt_n)

clt_pubkey = str(clt_e)+" "+str(clt_n)
clt_prvkey = str(clt_d)+" "+str(clt_n)

# print('client public key :- ',clt_pubkey)
# print('client private key :- ',clt_prvkey)

ser_e = 0
ser_n = 0


############################################################################################################################################

# Here , Handshake function is implemented ,
# Its implementation takes 8 steps
# 01 - send Client Hello To Server
# 02 - get Server Hello
# 03 - client send Certificate Request To Server
# 04 - get Server Certificate
# 05 - send Certificate To Server
# 06 - get Finish Handshake Request From Server
# 07 - send Finish HandShake Request To Server
# 08 - get Server Ready Message

##########################################################################################################################

def sendClientHelloToServer(client_socket):
	data = "hsk"
	data = data+" "+"01"
	data = data +" "+"clientHello"
	print('\n in the sendClientHelloToServer function ')
	print(data)
	client_socket.send(data.encode())

def decodeAndSplit(dats):
	dats = dats.decode()
	dats = dats.split(" ")
	return dats


def getServerHello(client_socket):
	while True:
		dats = client_socket.recv(1024)
		print('\n')
		print("in the function getServerHello of client :-")
		dats = decodeAndSplit(dats)
		print("data we get after decoding :- ",dats)

		if dats[0]=="hsk":
			if dats[1]=="02" and dats[2]=="serverHello":
				return True
			else:
				return False
		else:
			return False

def sendCertiReqToServer(client_socket):
	data = "hsk"
	data = data + " " + "03"
	data = data + " " + "CertificateRequestToServerByClient"
	print("\n in the sendCertiReqToServer function ")
	print(data)
	client_socket.send(data.encode())


def getServerCertificate(client_socket):
	while True:
		dats = client_socket.recv(1024)
		print('\n')
		print("in the function getServerCertificate of client :-")
		dats = decodeAndSplit(dats)

		kstr = ''

		if dats[0]=="hsk":
			if len(dats)!=4:
				print('length of returned data is not 4')
				return False,kstr
			elif dats[1]=="04":
				server_cert = dats[2]+" "+dats[3]
				return True,server_cert
			else:
				return False,kstr
		else:
			return False,kstr

def sendCertificateToServer(client_socket):
	data = "hsk"
	data = data +" "+"05"
	data = data + " "+clt_pubkey
	print("\n in the sendCertificateToServer function")
	print(data)
	client_socket.send(data.encode())

def getFinishHandshakeRequestFromServer(client_socket):
	while True:
		data = client_socket.recv(1024)
		data = decodeAndSplit(data)
		print("\n in the getFinishHandshakeRequestFromServer function :- ")

		if data[0]=="hsk":
			if data[1]=="06" and data[2]=="FinishHandshakeRequestToClient":
				return True
			else:
				return False
		else:
			return False

def sendFinishHandShakeRequestToServer(client_socket):
	data = "hsk"
	data = data + " "+"07"
	data = data + " "+"sendFinishHandShakeRequestToServer"
	print("\n in the sendFinishHandShakeRequestToServer function :-")
	print(data)
	client_socket.send(data.encode())

def getServerReadyMessage(client_socket):
	while True:
		data = client_socket.recv(1024)
		data = decodeAndSplit(data)
		print("\n in the getServerReadyMessage function")

		if data[0]=="hsk":
			if data[1]=="08" and data[2]=="ServerReadyToReceiveClientRequest":
				return True
			else:
				return False
		else:
			return True

def handshakeByServer(client_socket):
	sendClientHelloToServer(client_socket)
	print('\n')
	print('client hello has been sent , now receive server hello')
	print('\n')
	cond1 = getServerHello(client_socket)
	print('\n')

	if cond1 == True:
		print('server hello received , now send request for certificate')
	else:
		client_socket.close()
		exit()

	print('\n')

	sendCertiReqToServer(client_socket)
	print('\n')

	cond2,server_cert = getServerCertificate(client_socket)
	print('\n')

	global ser_e
	global ser_n

	if cond2 == True:
		print('server certificate received , value -> ',server_cert)
		server_cert = server_cert.split(" ")
		ser_e = int(server_cert[0])
		ser_n = int(server_cert[1])
	else:
		client_socket.close()
		exit()

	print('\n')

	sendCertificateToServer(client_socket)
	print('\n')

	cond3 = getFinishHandshakeRequestFromServer(client_socket)
	print('\n')

	if cond3 == True:
		print('server request to end handshake received and sending request to server to end handshake')
	else:
		client_socket.close()
		exit()

	print('\n')

	sendFinishHandShakeRequestToServer(client_socket)
	print('\n')

	cond4 = getServerReadyMessage(client_socket)
	print('\n')

	if cond4 == True:
		print('server is ready to message from client . Now handshake is True')
	else:
		client_socket.close()
		exit()

	return True


##############################################################################################################################


def client_process():

	client_socket = socket.socket()
	host = socket.gethostname()
	server_port = 6000
	client_port = 10000

	client_socket.bind((host,client_port))
	client_socket.connect((host,server_port))

	handshake = False

	print('ser_e - ',ser_e)
	print('ser_n - ',ser_n)
	print(' handshake - ',handshake)

	print("--------- handshaking started from client side ------------------")
	handshake = handshakeByServer(client_socket)

	print("new value of handshake :- ",handshake)


	print("connection established and keys are exchanged")
	print('\n')
	print('Now, Client is ready to send request')
	print('\n')
	print('There are 3 possible command by the client :-')
	print('1. Message request i.e. Client is requesting server for some information - (message)')
	print('2. Heartbeat request i.e. Client want to know system whether it is up or down - (heartbeat)')
	print('3. Close request i.e. Client want to terminate the connection. - (close)')

	isOn = 1
	while isOn:

		print('\n')
		commandInpRec = input('Enter your Client command :- ')

		if commandInpRec == "message":

			msg = input('Enter your message to server :- ')
			clmsg = "message"
			clmsg = clmsg +" "+"01"
			clmsg = clmsg +" "+msg
			print('clmsg - ',clmsg)
			print('inputted message sent to server \n')
			client_socket.send(clmsg.encode())
			while True:
				srmsg = client_socket.recv(1024)
				srmsg = srmsg.decode()
				if srmsg:
					print('response of server received - ',srmsg)
					print('\n')
					break

		elif commandInpRec == "heartbeat":

			heartbeatmsg = input('Enter your heartbeat message :- ')
			heartbeatlength = input('Enter heartbeat message length :- ')
			clhbmsg = "heartbeat"
			clhbmsg = clhbmsg + " "+"02"
			clhbmsg = clhbmsg + " "+heartbeatmsg+" "+heartbeatlength
			print(' inputted heartbeat message is sent to sever. \n')
			client_socket.send(clhbmsg.encode())
			while True:
				srhbmsg = client_socket.recv(1024)
				srhbmsg = srhbmsg.decode()
				if srhbmsg:
					print(' response of heartbeat message by server :- ',srhbmsg)
					print('\n')
					break
		elif commandInpRec == "close":
			print("closing the connection of the request of client ")
			client_socket.close()
			isOn = 0
		else:
			print("Wrong command send again ")




# start of client process
if __name__ == "__main__":

	print("Starting client process")
	client_process()